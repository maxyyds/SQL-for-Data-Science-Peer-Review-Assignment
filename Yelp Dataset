SQL for Data Science: Peer Review Assignment
Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
Attribute table = 10000
SELECT Count(*)
FROM attribute

Business table = 10000
SELECT Count(*)
FROM business

Category table = 10000
SELECT Count(*)
FROM category

Checkin table = 10000
SELECT Count(*)
FROM checkin

elite_years table = 10000
SELECT Count(*)
FROM elite_years

friend table = 10000
SELECT Count(*)
FROM friend

hours table = 10000
SELECT Count(*)
FROM hours

photo table = 10000
SELECT Count(*)
FROM photo

review table = 10000
SELECT Count(*)
FROM review

tip table = 10000
SELECT Count(*)
FROM tip

user table = 10000
SELECT Count(*)
FROM user


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

Business (id) = 10000
SELECT Count(distinct id)
FROM business

Hours (business_id) = 1562
SELECT Count(distinct business_id)
FROM hours

Category (business_id) = 2643
SELECT Count(distinct business_id)
FROM category

Attribute (business_id) = 1115
SELECT Count(distinct business_id)
FROM attribute

Review (id) = 10000 | (business_id) = 8090 | (user_id) = 9581
SELECT Count(distinct id)
FROM review

SELECT Count(distinct business_id)
FROM review

SELECT Count(distinct user_id)
FROM review

Checkin (business_id) = 493
SELECT Count(distinct business_id)
FROM checkin

Photo (id) = 10000 | (business_id) = 6493
SELECT Count(distinct id)
FROM photo

SELECT Count(distinct business_id)
FROM photo
Tip (user_id) =537 | (business_id) = 3979
SELECT Count(distinct user_id)
FROM tip

SELECT Count(distinct business_id)
FROM tip

User (id) = 10000
SELECT Count(distinct id)
FROM user

Friend (user_id) = 11
SELECT Count(distinct user_id)
FROM friend

Elite_years (user_id) = 2780
SELECT Count(distinct user_id)
FROM elite_years

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	

3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	SQL code used to arrive at answer:
SELECT *
FROM user
WHERE id IS NULL OR
    name IS NULL OR
    review_count IS NULL OR
    yelping_since IS NULL OR
    useful IS NULL OR
    cool IS NULL OR
    fans IS NULL OR
    average_stars IS NULL OR
    compliment_hot IS NULL OR
    compliment_more IS NULL OR
    compliment_profile IS NULL OR
    compliment_cute IS NULL OR
    compliment_list IS NULL OR
    compliment_note IS NULL OR
    compliment_plain IS NULL OR
    compliment_cool IS NULL OR
    compliment_funny IS NULL OR
    compliment_writer IS NULL OR
    compliment_photos IS NULL


4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082

SELECT min(stars)
FROM review

SELECT max(stars)
FROM review

SELECT avg(stars)
FROM review

	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549

SELECT min(stars)
FROM business

SELECT max(stars)
FROM business

SELECT avg(stars)
FROM business

	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144

SELECT min(likes)
FROM tip

SELECT max(likes)
FROM tip

SELECT avg(likes)
FROM tip
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414

SELECT min(count)
FROM checkin

SELECT max(count)
FROM checkin

SELECT avg(count)
FROM checkin

	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995
		
SELECT min(review_count)
FROM user

SELECT max(review_count)
FROM user

SELECT avg(review_count)
FROM user


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

SELECT city, sum(review_count) AS total_review
FROM business
GROUP BY city
ORDER BY total_review DESC

	
Copy and Paste the Result Below:
	
+-----------------+--------------+
| city            | total_review |
+-----------------+--------------+
| Las Vegas       |        82854 |
| Phoenix         |        34503 |
| Toronto         |        24113 |
| Scottsdale      |        20614 |
| Charlotte       |        12523 |
| Henderson       |        10871 |
| Tempe           |        10504 |
| Pittsburgh      |         9798 |
| Montréal        |         9448 |
| Chandler        |         8112 |
| Mesa            |         6875 |
| Gilbert         |         6380 |
| Cleveland       |         5593 |
| Madison         |         5265 |
| Glendale        |         4406 |
| Mississauga     |         3814 |
| Edinburgh       |         2792 |
| Peoria          |         2624 |
| North Las Vegas |         2438 |
| Markham         |         2352 |
| Champaign       |         2029 |
| Stuttgart       |         1849 |
| Surprise        |         1520 |
| Lakewood        |         1465 |
| Goodyear        |         1155 |
+-----------------+--------------+
(Output limit exceeded, 25 of 362 total rows shown)
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars, sum(review_count) AS stars_rating_count
FROM business
WHERE city = "Avon"
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
 
+-------+--------------------+
| stars | stars_rating_count |
+-------+--------------------+
|   1.5 |                 10 |
|   2.5 |                  6 |
|   3.5 |                 88 |
|   4.0 |                 21 |
|   4.5 |                 31 |
|   5.0 |                  3 |
+-------+--------------------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT stars, sum(review_count) AS stars_rating_count
FROM business
WHERE city = "Beachwood"
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
		
+-------+--------------------+
| stars | stars_rating_count |
+-------+--------------------+
|   2.0 |                  8 |
|   2.5 |                  3 |
|   3.0 |                 11 |
|   3.5 |                  6 |
|   4.0 |                 69 |
|   4.5 |                 17 |
|   5.0 |                 23 |
+-------+--------------------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
SELECT name, sum(review_count) AS review
FROM user
GROUP BY id
ORDER BY review DESC
LIMIT 3

	Copy and Paste the Result Below:
		
 
+--------+--------+
| name   | review |
+--------+--------+
| Gerald |   2000 |
| Sara   |   1629 |
| Yuri   |   1339 |
+--------+--------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

Based on the result in the table below, we can see Gerald with a total of 2000 reviews but only 253 fans, that is an average of 7 fans per review. On the other hand, Sara has 1629 reviews but with only 50 fans.  Posing more reviews does not correlate with more fans. 

Therefore, we can conclude that posing more reviews do not correlate with more fans. 
	
SELECT name, 
sum(review_count) AS total_review, 
fans, 
sum(review_count)/fans AS avg_review_per_fan
FROM user
GROUP BY id
ORDER BY total_review DESC

Result Table:
+-----------+--------------+------+--------------------+
| name      | total_review | fans | avg_review_per_fan |
+-----------+--------------+------+--------------------+
| Gerald    |         2000 |  253 |                  7 |
| Sara      |         1629 |   50 |                 32 |
| Yuri      |         1339 |   76 |                 17 |
| .Hon      |         1246 |  101 |                 12 |
| William   |         1215 |  126 |                  9 |
| Harald    |         1153 |  311 |                  3 |
| eric      |         1116 |   16 |                 69 |
| Roanna    |         1039 |  104 |                  9 |
| Mimi      |          968 |  497 |                  1 |
| Christine |          930 |  173 |                  5 |
| Ed        |          904 |   38 |                 23 |
| Nicole    |          864 |   43 |                 20 |
| Fran      |          862 |  124 |                  6 |
| Mark      |          861 |  115 |                  7 |
| Christina |          842 |   85 |                  9 |
| Dominic   |          836 |   37 |                 22 |
| Lissa     |          834 |  120 |                  6 |
| Lisa      |          813 |  159 |                  5 |
| Alison    |          775 |   61 |                 12 |
| Sui       |          754 |   78 |                  9 |
| Tim       |          702 |   35 |                 20 |
| L         |          696 |   10 |                 69 |
| Angela    |          694 |  101 |                  6 |
| Crissy    |          676 |   25 |                 27 |
| Lyn       |          675 |   45 |                 15 |
+-----------+--------------+------+--------------------+

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:

There are more reviews with the word “love”
	
	SQL code used to arrive at answer:

SELECT  feelings, 
        count(*) AS total_count
FROM 
(SELECT CASE    WHEN text LIKE "%love%" THEN "love"
                WHEN text LIKE "%hate%" THEN "hate"
                ELSE "Others"
                END feelings
                FROM review)
GROUP BY feelings
ORDER BY total_count DESC

+----------+-------------+
| feelings | total_count |
+----------+-------------+
| Others   |        8042 |
| love     |        1780 |
| hate     |         178 |
+----------+-------------+
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
SELECT name, sum(fans) AS total_fans
FROM user
GROUP BY id
ORDER BY total_fans DESC
LIMIT 10

	
Copy and Paste the Result Below:

+-----------+------------+
| name      | total_fans |
+-----------+------------+
| Amy       |        503 |
| Mimi      |        497 |
| Harald    |        311 |
| Gerald    |        253 |
| Christine |        173 |
| Lisa      |        159 |
| Cat       |        133 |
| William   |        126 |
| Fran      |        124 |
| Lissa     |        120 |
+-----------+------------+
		
